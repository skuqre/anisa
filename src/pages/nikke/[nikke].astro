---
import NIKKEgg from "../../components/ratetables/NIKKEgg.astro";
import Prydwen from "../../components/ratetables/Prydwen.astro";
import Hover from "../../components/Hover.astro";
import Header from "../../components/Header.astro";
import Sidebar from "../../components/Sidebar.astro";

import fuzzysort from "fuzzysort";
import GlobalStyles from "../../components/GlobalStyles.astro";

const { nikke } = Astro.params;

export async function getStaticPaths() {
	const response = await fetch('https://api.dotgg.gg/nikke/characters/');
	const jsonresponse = await response.json();
	return jsonresponse.map((e: any) => {return {params: {nikke: e.url}}});
}

const prydres = await fetch('https://www.prydwen.gg/page-data/nikke/characters/page-data.json');
const prydresj = await prydres.json();

// dev note: i have to replace all dashes with spaces for the fuzzy to work correctly
// apparently "anis-sparkling-summer" and "sparkling-summer-anis" are not the same thing with dashes
const prydslug = fuzzysort.go((nikke + '').replaceAll('-', ' '), prydresj.result.data.allCharacters.nodes.map((e: any) => e.slug.replaceAll('-', ' ')));

const nikkegglink = 'https://api.dotgg.gg/nikke/character/' + nikke;

const response = await fetch(nikkegglink);
const jsonresponse = await response.json();

const prydlink = 'https://www.prydwen.gg/page-data/nikke/characters/' + prydslug[0].target.replaceAll(" ", '-') + '/page-data.json';
const prydlinka = 'https://www.prydwen.gg/nikke/characters/' + prydslug[0].target.replaceAll(" ", '-');
const prydress = await (await fetch(prydlink)).json();

import limitData from '../../../public/data/limited.json';
import variationsData from '../../../public/data/variations.json';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<!-- <link rel="icon" type="image/svg+xml" href="/favicon.svg" /> -->
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />

		<title>{ jsonresponse.name + " - Anisa" }</title>
		<meta name="description" content={ prydress.result.data.currentUnit.nodes[0].backstory != null ? prydress.result.data.currentUnit.nodes[0].backstory.backstory : jsonresponse.description }>
		<meta property="og:image" content={ `https://nikke-db-legacy.pages.dev/images/sprite/${jsonresponse.img}.png`}>

		<meta content="#f4d259" data-react-helmet="true" name="theme-color" />
		<link rel="stylesheet" as="style" crossorigin href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/dist/web/static/pretendard.min.css" />
		<link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>

		<style>
			body {
				font-family: 'Pretendard', sans-serif;
			}
		</style>
	</head>
	<body>
		<Header />
		<Sidebar />
		<div class="main">
			<div class="wrapper">
				<h1 id="nikke-name">{ jsonresponse.name }</h1>

				<div class="top-main">
					<div class="img-wrapper">
						<img id="nikke-fb" src="" alt={ jsonresponse.name + " Full Body" } />
					</div>
					<div class="rate-wrapper">
						<h2>Ratings</h2>
						<div class="rates-scroll">
							<div class="rates">
								<h3>
									<a href={ "https://nikke.gg/characters/" + nikke } target="_blank">NIKKE.gg</a>
									<Hover content="*" hid="nikkegg">
										This may have <b>rounded values</b>.<br>
										Letter ranking may also be inaccurate.
									</Hover>
								</h3>
								<NIKKEgg />
							</div>

							<div class="rates">
								<h3>
									<a href={ "https://prydwen.gg/nikke/characters/" + prydslug[0].target.replaceAll(" ", '-') } target="_blank">Prydwen.gg</a>
									<Hover content="*" hid="prydwen">
										<b>Data from:</b><br>
										<a href={prydlinka} target="_blank">{prydlinka}</a><br>
										The link may be wrong on specific cases;<br>
										be on the lookout!
									</Hover>
								</h3>
								<Prydwen />
							</div>
						</div>
					</div>
				</div>

				<div class="nikke-main">
					<div class="fun-stuff">
						<div>
							<h2>Backstory</h2>
							<p id="nikke-bs"></p>
						</div>
						<div>
							<h2>Character Information</h2>
							<div class="info-table">
								<table class="char-info">
									<tr>
										<th>Full Name</th>
										<td id="nikke-fn"></td>
									</tr>
									<tr>
										<th>Voice (EN)</th>
										<td id="nikke-ven"></td>
									</tr>
									<tr>
										<th>Voice (JP)</th>
										<td id="nikke-vjp"></td>
									</tr>
									<tr>
										<th>Voice (KR)</th>
										<td id="nikke-vkr"></td>
									</tr>
									<tr>
										<th>Release Date</th>
										<td id="nikke-release"></td>
									</tr>
									<tr>
										<th>Specialities</th>
										<td id="nikke-special"></td>
									</tr>
								</table>
								<table class="char-info">
									<tr>
										<th>Squad</th>
										<td id="nikke-squad"></td>
									</tr>
									<tr>
										<th>Rarity</th>
										<td id="nikke-rarity"></td>
									</tr>
									<tr>
										<th>Element</th>
										<td id="nikke-elem"></td>
									</tr>
									<tr>
										<th>Manufacturer</th>
										<td id="nikke-manu"></td>
									</tr>
									<tr>
										<th>Class</th>
										<td id="nikke-class"></td>
									</tr>
									<tr>
										<th>Weapon</th>
										<td id="nikke-weapon"></td>
									</tr>
								</table>
							</div>
						</div>
					</div>
					<div class="build-stuff">
						<div>
							<h2>About</h2>
							<p id="nikke-who"></p>
						</div>
						<div>
							<h2>Advise Data</h2>
						</div>
						<div>
							<h2>Harmony Cube Data</h2>
						</div>
					</div>
				</div>
			</div>
		</div>

		<script define:vars={{nikke, nikkegglink, prydresj, prydslug, prydlink, prydress, limitData, variationsData}}>
			var prydRates = {
				"11": ["SSS", "#e04be0"],
				"10": ["SS", "#ef5350"],
				"9": ["S", "#ff7f7f"],
				"8": ["A", "#f9a2a2"],
				"7": ["B", "#ffbf7f"],
				"6": ["C", "#ffff7f"],
				"5": ["D", "#bfff7f"],
				"4": ["E", "#9df89d"],
				"1": ["Unrated", ""]
			}
			
			function getNIKKEggRating(a) {
				let num = parseFloat(a)
				
				// anyone from nikke.gg reading this may correct this however they want
				// please increase the contrast of the rank colors!
				var ratings = [
					["SSS", num > 9.5, "#c12d5c"],
					["SS", num > 9, "#c34545"],
					["S+", num > 8.5, "#bf4f3b"], // u r a fucken doozy this rank
					["S", num > 8, "#bc5d34"],
					["A", num > 7, "#b0732c"],
					["B", num > 6, "#a08633"],
					["C", num > 4, "#8f9646"],
					["D", num > 2, "#7da361"],
					["F", num > 0, "#6eaf7f"]
				];

				for (let i = 0; i < ratings.length; i++) {
					if (ratings[i][1]) {
						return [ratings[i][0], ratings[i][2]];
					}
				}
			}

			let pry = prydress.result.data.currentUnit.nodes[0];

			fetch(nikkegglink)
				.then((e) => {
					e.json().then((d) => {

						console.log(d);
						document.getElementById('nikke-fb').src = "https://static.dotgg.gg/nikke/characters/" + d.imgBig + ".webp";

						if (pry.backstory != null) {
							document.getElementById('nikke-bs').innerHTML = pry.backstory.backstory;
						} else if (d.description != null) {
							document.getElementById('nikke-bs').innerHTML = d.description;
						} else {
							document.getElementById('nikke-bs').innerHTML = "This NIKKE has no description provided."
						}

						if (d.tierlist != null) {
							document.getElementById('nikgg-story').innerHTML = d.tierlist.Story + " (" + getNIKKEggRating(d.tierlist.Story)[0] + ")";
							document.getElementById('nikgg-story').style.backgroundColor = getNIKKEggRating(d.tierlist.Story)[1];

							document.getElementById('nikgg-boss').innerHTML = d.tierlist.Boss + " (" + getNIKKEggRating(d.tierlist.Boss)[0] + ")";
							document.getElementById('nikgg-boss').style.backgroundColor = getNIKKEggRating(d.tierlist.Boss)[1];

							document.getElementById('nikgg-pvp').innerHTML = d.tierlist.PvP + " (" + getNIKKEggRating(d.tierlist.PvP)[0] + ")";
							document.getElementById('nikgg-pvp').style.backgroundColor = getNIKKEggRating(d.tierlist.PvP)[1];

							document.getElementById('nikgg-comb').innerHTML = d.tierlist.Combined + " (" + getNIKKEggRating(d.tierlist.Combined)[0] + ")";
							document.getElementById('nikgg-comb').style.backgroundColor = getNIKKEggRating(d.tierlist.Combined)[1];

							document.getElementById('nikgg-invest').innerHTML = d.tierlist.reqInvest == 'FALSE' ? 'No' : 'Yes';
							document.getElementById('nikgg-invest').style.backgroundColor = d.tierlist.reqInvest == 'FALSE' ? '#ed4245' : '#77dd77';
						} else {
							document.getElementById('nikgg-story').innerHTML = "Unrated";
							document.getElementById('nikgg-boss').innerHTML = "Unrated";
							document.getElementById('nikgg-pvp').innerHTML = "Unrated";
							document.getElementById('nikgg-comb').innerHTML = "Unrated";
							document.getElementById('nikgg-invest').innerHTML = "Unrated";
						}

						document.getElementById('nikke-fn').innerHTML = d.name;
						document.getElementById('nikke-ven').innerHTML = pry.cv.en;
						document.getElementById('nikke-vjp').innerHTML = pry.cv.jpn;
						document.getElementById('nikke-vkr').innerHTML = pry.cv.kr;

						document.getElementById('nikke-release').innerHTML = pry.releaseDate;
						document.getElementById('nikke-special').innerHTML = pry.specialities == null ? 'None found.' : pry.specialities.join(', ');
						document.getElementById('nikke-squad').innerHTML = d.squad;
						document.getElementById('nikke-rarity').innerHTML = d.rarity;

						document.getElementById('nikke-weapon').innerHTML = `
						<div class="inlined-hex hex-gray" style='filter: invert(1)'>
							<img src="/anisa/images/sight_${d.weapon.toLowerCase()}.png" alt="Burst ${pry.weapon}" title="${pry.weapon}" />
						</div>
						${pry.weapon}
						`;

						document.getElementById('nikke-manu').innerHTML = `
						<div class="inlined-hex hex-gray">
							<img src="/anisa/images/manu_${d.manufacturer.toLowerCase()}.png" alt="${d.manufacturer}" title="${d.manufacturer}" />
						</div>
						${d.manufacturer}
						`;

						document.getElementById('nikke-elem').innerHTML = `
						<div class="inlined-hex hex-gray" style='background-image: url(/anisa/images/colored/hex_frame_${d.element.toLowerCase()}.png)'>
							<img src="/anisa/images/colored/ele_${d.element.toLowerCase()}.png" alt="${d.element}" title="${d.element}" />
						</div>
						${d.element}
						`;

						document.getElementById('nikke-class').innerHTML = `
						<div class="inlined-hex hex-gray">
							<img src="/anisa/images/class_${d.class.toLowerCase()}.png" alt="${d.class}" title="${d.class}" />
						</div>
						${d.class}
						`;

						let bursticon = `
						<div class="inlined-hex hex-gray">
							<img src="/anisa/images/burst_${d.burst}.png" alt="Burst ${d.burst}" title="${d.burst}" />
						</div>
						`

						let burstDisc = d.burst != 'p' ? '' : `
						<p class="burst disc">
						She\'s a NIKKE with a special gimmick where she can progress every burst stage. When she bursts for any stage, she has a different ability.
						</p>`

						let rehabDisc = ["guilty", "sin", "quency", "nihilister"].indexOf(d.name.toLowerCase()) == -1 ? '' : `
						<p class="rehab disc">
						🚓 ${d.name} is a <b>Rehabilitation</b> NIKKE.<br><br>
						She can only be obtained through accessing the Outpost's elevator${d.name.toLowerCase() == 'nihilister' ? ' (and after completing Stage 20-31 Normal)' : ''}, and spare bodies can only be obtained through the Union Shop.
						</p>`

						let limitDisc = limitData[d.url] === undefined ? '' : `
						<p class="limited disc">
						⚠ ${d.name} is a <b>Limited</b> NIKKE. This means the unit is not in any recruitment pool.<br><br>
						${limitData[d.url]}
						</p>
						`

						let seeAlso = variationsData[d.url] === undefined ? '' : `
						<a href="/anisa/nikke/${variationsData[d.url]}/">Wanna see the base form of this unit?</a>
						`

						let nikkeAbout = `
						${d.name} is a ${bursticon} Burst ${d.burst != 'p' ? d.burst : 'All'} NIKKE.
						${burstDisc}
						${rehabDisc}
						${limitDisc}
						`

						nikkeAbout += seeAlso.length <= 0 ? '' : `<br><br>${seeAlso}`;
						
						document.getElementById('nikke-who').innerHTML = nikkeAbout.trim();
					});
				})
				.catch((err) => {

				});

			console.log(pry)
			document.getElementById('pryd-bossadds').innerHTML = prydRates[parseInt(pry.ratings.bossAdds)][0];
			document.getElementById('pryd-bossadds').style.backgroundColor = prydRates[parseInt(pry.ratings.bossAdds)][1];

			document.getElementById('pryd-bosssolo').innerHTML = prydRates[parseInt(pry.ratings.bossSolo)][0];
			document.getElementById('pryd-bosssolo').style.backgroundColor = prydRates[parseInt(pry.ratings.bossSolo)][1];

			document.getElementById('pryd-pvp').innerHTML = prydRates[parseInt(pry.ratings.pvp)][0];
			document.getElementById('pryd-pvp').style.backgroundColor = prydRates[parseInt(pry.ratings.pvp)][1];


			document.getElementById('pryd-early').innerHTML = prydRates[parseInt(pry.ratings.storyEarly)][0];
			document.getElementById('pryd-early').style.backgroundColor = prydRates[parseInt(pry.ratings.storyEarly)][1];

			document.getElementById('pryd-mid').innerHTML = prydRates[parseInt(pry.ratings.storyMid)][0];
			document.getElementById('pryd-mid').style.backgroundColor = prydRates[parseInt(pry.ratings.storyMid)][1];

			document.getElementById('pryd-late').innerHTML = prydRates[parseInt(pry.ratings.storyEnd)][0];
			document.getElementById('pryd-late').style.backgroundColor = prydRates[parseInt(pry.ratings.storyEnd)][1];

		</script>
	</body>
</html>

<GlobalStyles />