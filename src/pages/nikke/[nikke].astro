---
import NIKKEgg from "../../components/ratetables/NIKKEgg.astro";
import Prydwen from "../../components/ratetables/Prydwen.astro";
import Hover from "../../components/Hover.astro";
import Header from "../../components/Header.astro";
import Sidebar from "../../components/Sidebar.astro";
import ADVISESearchbar from '../../components/ADVISESearchbar.astro';

import fuzzysort from "fuzzysort";
import GlobalStyles from "../../components/GlobalStyles.astro";

const { nikke } = Astro.params;

export async function getStaticPaths() {
	const response = await fetch('https://api.dotgg.gg/nikke/characters/');
	const jsonresponse = await response.json();
	return jsonresponse.map((e: any) => {return {params: {nikke: e.url}}});
}

const prydres = await fetch('https://www.prydwen.gg/page-data/nikke/characters/page-data.json');
const prydresj = await prydres.json();

// dev note: i have to replace all dashes with spaces for the fuzzy to work correctly
// apparently "anis-sparkling-summer" and "sparkling-summer-anis" are not the same thing with dashes
const prydslug = fuzzysort.go((nikke + '').replaceAll('-', ' '), prydresj.result.data.allCharacters.nodes.map((e: any) => e.slug.replaceAll('-', ' ')));

const nikkegglink = 'https://api.dotgg.gg/nikke/character/' + nikke;

const response = await fetch(nikkegglink);
const jsonresponse = await response.json();

const prydlink = 'https://www.prydwen.gg/page-data/nikke/characters/' + prydslug[0].target.replaceAll(" ", '-') + '/page-data.json';
const prydlinka = 'https://www.prydwen.gg/nikke/characters/' + prydslug[0].target.replaceAll(" ", '-');
const prydress = await (await fetch(prydlink)).json();

const adviselist = await fetch('https://api.dotgg.gg/nikke/advise');
const advisejson = await adviselist.json();

const adviseClean: any = {};
for (let i = 0; i < advisejson.length; i++) {
	if (adviseClean[advisejson[i].nikke] === undefined) {
		adviseClean[advisejson[i].nikke] = [];
	}

	adviseClean[advisejson[i].nikke].push({
		"query": advisejson[i].question.replaceAll("{AccountData.NickName}", "<code>(you)</code>"),
		"good": advisejson[i].goodanswer.replaceAll("{AccountData.NickName}", "<code>(you)</code>"),
		"bad": advisejson[i].badanswer.replaceAll("{AccountData.NickName}", "<code>(you)</code>"),
	});
}

import limitData from '../../../public/data/limited.json';
import variationsData from '../../../public/data/variations.json';
import specialData from '../../../public/data/special.json';
import colors from '../../../public/data/colors.json';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<!-- <link rel="icon" type="image/svg+xml" href="/favicon.svg" /> -->
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />

		<title>{ jsonresponse.name + " - Anisa" }</title>
		<meta name="description" content={ prydress.result.data.currentUnit.nodes[0].backstory != null ? prydress.result.data.currentUnit.nodes[0].backstory.backstory : jsonresponse.description }>
		<meta property="og:image" content={ `https://nikke-db-legacy.pages.dev/images/sprite/${jsonresponse.img}.png`}>

		<meta content="#f4d259" data-react-helmet="true" name="theme-color" />
		<link rel="stylesheet" as="style" crossorigin href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.9/dist/web/static/pretendard.min.css" />
		<link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
		<link rel="icon" type="image/x-icon" href={ `https://nikke-db-legacy.pages.dev/images/sprite/${jsonresponse.img}.png` }>

		<style>
			body {
				font-family: 'Pretendard', sans-serif;
			}
		</style>
	</head>
	<body>
		<Header />
		<Sidebar />
		<div class="main">
			<div class="wrapper">
				<h1 id="nikke-name">{ jsonresponse.name }</h1>

				<div class="top-main">
					<div class="img-wrapper">
						<img id="nikke-fb" src="" alt={ jsonresponse.name + " Full Body" } />
					</div>
					<div class="rate-wrapper">
						<h2>Ratings</h2>
						<div class="scroll-limit">
							<div class="rates">
								<h3>
									<a href={ "https://nikke.gg/characters/" + nikke } target="_blank">NIKKE.gg</a>
									<Hover content="*" hid="nikkegg">
										This may have <b>rounded values</b>.<br>
										Letter ranking may also be inaccurate.
									</Hover>
								</h3>
								<NIKKEgg />
							</div>

							<div class="rates">
								<h3>
									<a href={ "https://prydwen.gg/nikke/characters/" + prydslug[0].target.replaceAll(" ", '-') } target="_blank">Prydwen.gg</a>
									<Hover content="*" hid="prydwen">
										<b>Data from:</b><br>
										<a href={prydlinka} target="_blank">{prydlinka}</a><br>
										The link may be wrong on specific cases;<br>
										be on the lookout!
									</Hover>
								</h3>
								<Prydwen />
							</div>
						</div>
					</div>
				</div>

				<div class="nikke-main">
					<div class="fun-stuff">
						<div>
							<h2>Backstory</h2>
							<p id="nikke-bs"></p>
						</div>
						<div>
							<h2>Character Information</h2>
							<div class="info-table">
								<table class="char-info">
									<tr>
										<th>Full Name</th>
										<td id="nikke-fn"></td>
									</tr>
									<tr>
										<th>Voice (EN)</th>
										<td id="nikke-ven"></td>
									</tr>
									<tr>
										<th>Voice (JP)</th>
										<td id="nikke-vjp"></td>
									</tr>
									<tr>
										<th>Voice (KR)</th>
										<td id="nikke-vkr"></td>
									</tr>
									<tr>
										<th>Release Date</th>
										<td id="nikke-release"></td>
									</tr>
									<tr>
										<th>Specialities</th>
										<td id="nikke-special"></td>
									</tr>
								</table>
								<table class="char-info">
									<tr>
										<th>Squad</th>
										<td id="nikke-squad"></td>
									</tr>
									<tr>
										<th>Rarity</th>
										<td id="nikke-rarity"></td>
									</tr>
									<tr>
										<th>Element</th>
										<td id="nikke-elem"></td>
									</tr>
									<tr>
										<th>Manufacturer</th>
										<td id="nikke-manu"></td>
									</tr>
									<tr>
										<th>Class</th>
										<td id="nikke-class"></td>
									</tr>
									<tr>
										<th>Weapon</th>
										<td id="nikke-weapon"></td>
									</tr>
								</table>
							</div>
						</div>
						<div>
							<h2>Skills Data</h2>
							<div class="skill-cell">
								<h4 class="skill-main">Normal Attack</h4>
								<p id="normal-attack"></p>
							</div>
							<div class="skill-cell">
								<h4 class="skill-main" id="sk1t">Skill 1: </h4>
								<p id="skill1"></p>
							</div>
							<div class="skill-cell">
								<h4 class="skill-main" id="sk2t">Skill 2: </h4>
								<p id="skill2"></p>
							</div>
							<div class="skill-cell">
								<h4 class="skill-main" id="burt">Burst: </h4>
								<p id="burst"></p>
							</div>
						</div>
					</div>
					<div class="build-stuff">
						<div>
							<h2>About</h2>
							<p id="nikke-who"></p>
						</div>
						<div>
							<h2>
								Advise Data
								<Hover content=`*` hid="advise">
									<b>Colors are marked as follows:</b>
									<span class="advise-right">Right answer</span>
									<span class="advise-wrong">Wrong answer</span>
								</Hover>
							</h2>
							<ADVISESearchbar />
							<div class="scroll-limit" id="advise-list"></div>
						</div>
						<div>
							<h2>Harmony Cube Data</h2>
						</div>
					</div>
				</div>
			</div>
		</div>

		<script define:vars={{nikke, nikkegglink, prydresj, prydslug, prydlink, prydress, limitData, variationsData, specialData, adviseClean, jsonresponse, colors}} type="module">
			import {go} from "https://skuqre.github.io/anisa/fuzzysort.js"; // just fucking direct link it lmao

			var prydRates = {
				"11": ["SSS", "#e04be0"],
				"10": ["SS", "#ef5350"],
				"9": ["S", "#ff7f7f"],
				"8": ["A", "#f9a2a2"],
				"7": ["B", "#ffbf7f"],
				"6": ["C", "#ffff7f"],
				"5": ["D", "#bfff7f"],
				"4": ["E", "#9df89d"],
				"1": ["Unrated", ""]
			}
			
			function getNIKKEggRating(a) {
				let num = parseFloat(a)
				
				// anyone from nikke.gg reading this may correct this however they want
				// please increase the contrast of the rank colors!
				var ratings = [
					["SSS", num > 9.5, "#c12d5c"],
					["SS", num > 9, "#c34545"],
					["S+", num > 8.5, "#bf4f3b"], // u r a fucken doozy this rank
					["S", num > 8, "#bc5d34"],
					["A", num > 7, "#b0732c"],
					["B", num > 6, "#a08633"],
					["C", num > 4, "#8f9646"],
					["D", num > 2, "#7da361"],
					["F", num > 0, "#6eaf7f"]
				];

				for (let i = 0; i < ratings.length; i++) {
					if (ratings[i][1]) {
						return [ratings[i][0], ratings[i][2]];
					}
				}
			}

			let pry = prydress.result.data.currentUnit.nodes[0];

			let d = jsonresponse;

			console.log(d);
			document.getElementById('nikke-fb').src = "https://static.dotgg.gg/nikke/characters/" + d.imgBig + ".webp";

			if (pry.backstory != null) {
				document.getElementById('nikke-bs').innerHTML = pry.backstory.backstory;
			} else if (d.description != null) {
				document.getElementById('nikke-bs').innerHTML = d.description;
			} else {
				document.getElementById('nikke-bs').innerHTML = "This NIKKE has no description provided."
			}

			if (d.tierlist != null) {
				document.getElementById('nikgg-story').innerHTML = d.tierlist.Story + " (" + getNIKKEggRating(d.tierlist.Story)[0] + ")";
				document.getElementById('nikgg-story').style.backgroundColor = getNIKKEggRating(d.tierlist.Story)[1];

				document.getElementById('nikgg-boss').innerHTML = d.tierlist.Boss + " (" + getNIKKEggRating(d.tierlist.Boss)[0] + ")";
				document.getElementById('nikgg-boss').style.backgroundColor = getNIKKEggRating(d.tierlist.Boss)[1];

				document.getElementById('nikgg-pvp').innerHTML = d.tierlist.PvP + " (" + getNIKKEggRating(d.tierlist.PvP)[0] + ")";
				document.getElementById('nikgg-pvp').style.backgroundColor = getNIKKEggRating(d.tierlist.PvP)[1];

				document.getElementById('nikgg-comb').innerHTML = d.tierlist.Combined + " (" + getNIKKEggRating(d.tierlist.Combined)[0] + ")";
				document.getElementById('nikgg-comb').style.backgroundColor = getNIKKEggRating(d.tierlist.Combined)[1];

				document.getElementById('nikgg-invest').innerHTML = d.tierlist.reqInvest == 'FALSE' ? 'No' : 'Yes';
				document.getElementById('nikgg-invest').style.backgroundColor = d.tierlist.reqInvest == 'FALSE' ? '#ed4245' : '#77dd77';
			} else {
				document.getElementById('nikgg-story').innerHTML = "Unrated";
				document.getElementById('nikgg-boss').innerHTML = "Unrated";
				document.getElementById('nikgg-pvp').innerHTML = "Unrated";
				document.getElementById('nikgg-comb').innerHTML = "Unrated";
				document.getElementById('nikgg-invest').innerHTML = "Unrated";
			}

			document.getElementById('nikke-fn').innerHTML = d.name;
			document.getElementById('nikke-ven').innerHTML = pry.cv.en;
			document.getElementById('nikke-vjp').innerHTML = pry.cv.jpn;
			document.getElementById('nikke-vkr').innerHTML = pry.cv.kr;

			document.getElementById('nikke-release').innerHTML = pry.releaseDate;
			document.getElementById('nikke-special').innerHTML = pry.specialities == null ? 'None found.' : pry.specialities.join(', ');
			document.getElementById('nikke-squad').innerHTML = d.squad;
			document.getElementById('nikke-rarity').innerHTML = d.rarity;

			document.getElementById('nikke-weapon').innerHTML = `
			<div class="inlined-hex hex-gray" style='filter: invert(1)'>
				<img src="/anisa/images/sight_${d.weapon.toLowerCase()}.png" alt="Burst ${pry.weapon}" title="${pry.weapon}" />
			</div>
			${pry.weapon}
			`;

			document.getElementById('nikke-manu').innerHTML = `
			<div class="inlined-hex hex-gray">
				<img src="/anisa/images/manu_${d.manufacturer.toLowerCase()}.png" alt="${d.manufacturer}" title="${d.manufacturer}" />
			</div>
			${d.manufacturer}
			`;

			document.getElementById('nikke-elem').innerHTML = `
			<div class="inlined-hex hex-gray" style='background-image: url(/anisa/images/colored/hex_frame_${d.element.toLowerCase()}.png)'>
				<img src="/anisa/images/colored/ele_${d.element.toLowerCase()}.png" alt="${d.element}" title="${d.element}" />
			</div>
			${d.element}
			`;

			document.getElementById('nikke-class').innerHTML = `
			<div class="inlined-hex hex-gray">
				<img src="/anisa/images/class_${d.class.toLowerCase()}.png" alt="${d.class}" title="${d.class}" />
			</div>
			${d.class}
			`;

			let bursticon = `
			<div class="inlined-hex hex-gray">
				<img src="/anisa/images/burst_${d.burst}.png" alt="Burst ${d.burst}" title="Burst ${d.burst}" />
			</div>
			`

			let burstDisc = specialData[d.url] === undefined ? '' : `<p class="burst disc">${specialData[d.url]}</p>`

			let rehabDisc = ["guilty", "sin", "quency", "nihilister"].indexOf(d.name.toLowerCase()) == -1 ? '' : `
			<p class="rehab disc">
			<i class='bx bxs-taxi'></i> ${d.name} is a <b>Rehabilitation</b> NIKKE.<br><br>
			She can only be obtained through accessing the Outpost's elevator${d.name.toLowerCase() == 'nihilister' ? ' (and after completing Stage 20-31 Normal)' : ''}, and spare bodies can only be obtained through the Union Shop.
			</p>`

			let limitDisc = limitData[d.url] === undefined ? '' : `
			<p class="limited disc">
			<i class='bx bxs-alarm-exclamation'></i> ${d.name} is a <b>Limited</b> NIKKE. This means the unit is not in any recruitment pool.<br><br>
			${limitData[d.url]}
			</p>
			`

			let seeAlso = variationsData[d.url] === undefined ? '' : `
			<a href="/anisa/nikke/${variationsData[d.url]}/">Wanna see the base form of this unit?</a>
			`

			let nikkeAbout = `
			${d.name} is a ${bursticon} Burst ${d.burst != 'p' ? d.burst : 'All'} NIKKE.
			${burstDisc}
			${rehabDisc}
			${limitDisc}
			`

			nikkeAbout += seeAlso.length <= 0 ? '' : `<br><br>${seeAlso}`;
			
			document.getElementById('nikke-who').innerHTML = nikkeAbout.trim();

			refreshAdvise(d, adviseClean, false);

			function refreshAdvise(d, adviseList, isSearch) {
				document.getElementById('advise-list').innerHTML = '';

				if (adviseList[d.name] !== undefined && adviseList[d.name].length > 0) {
					for (let i = 0; i < adviseList[d.name].length; i++) {
						let adviseCell = `
						<div class="advise-question">
							<h4 class="advise-main">${adviseList[d.name][i].query}</h4>
							<span class="advise-right">${adviseList[d.name][i].good}</span>
							<span class="advise-wrong">${adviseList[d.name][i].bad}</span>
						</div>`

						document.getElementById('advise-list').innerHTML += adviseCell;
					}
				} else {
					document.getElementById('advise-list').innerHTML = isSearch ? "No results found." : "There are no advise sessions with this Nikke.";
					if (!isSearch) {
						document.getElementById('advise-search').style.display = 'none';
					}
				}
			}

			document.getElementById('advise-searchbar').addEventListener('input', (e) => {
				let dupe = [...adviseClean[jsonresponse.name]];
				let ass = go(document.getElementById("advise-searchbar").value.trim(), dupe, {keys: ['query', 'good', 'bad'], all: true});
				let ass2 = {}
				ass2[jsonresponse.name] = ass.map(e => e.obj);
				refreshAdvise(jsonresponse, ass2, true);
			})

			console.log(pry)
			document.getElementById('pryd-bossadds').innerHTML = prydRates[parseInt(pry.ratings.bossAdds)][0];
			document.getElementById('pryd-bossadds').style.backgroundColor = prydRates[parseInt(pry.ratings.bossAdds)][1];

			document.getElementById('pryd-bosssolo').innerHTML = prydRates[parseInt(pry.ratings.bossSolo)][0];
			document.getElementById('pryd-bosssolo').style.backgroundColor = prydRates[parseInt(pry.ratings.bossSolo)][1];

			document.getElementById('pryd-pvp').innerHTML = prydRates[parseInt(pry.ratings.pvp)][0];
			document.getElementById('pryd-pvp').style.backgroundColor = prydRates[parseInt(pry.ratings.pvp)][1];


			document.getElementById('pryd-early').innerHTML = prydRates[parseInt(pry.ratings.storyEarly)][0];
			document.getElementById('pryd-early').style.backgroundColor = prydRates[parseInt(pry.ratings.storyEarly)][1];

			document.getElementById('pryd-mid').innerHTML = prydRates[parseInt(pry.ratings.storyMid)][0];
			document.getElementById('pryd-mid').style.backgroundColor = prydRates[parseInt(pry.ratings.storyMid)][1];

			document.getElementById('pryd-late').innerHTML = prydRates[parseInt(pry.ratings.storyEnd)][0];
			document.getElementById('pryd-late').style.backgroundColor = prydRates[parseInt(pry.ratings.storyEnd)][1];

			document.getElementById('normal-attack').innerHTML = `
			<b>Damage</b>: ${d.damage} of ATK<br>
			${['sr', 'rl'].indexOf(d.weapon.toLowerCase()) !== -1 ? `<b>Charge Damage</b>: ${d.chargeDamage}<br><b>Charge Time</b>: ${d.chargeTime} second(s)<br>` : ""}
			<b>Burst Generation</b>: ${d.burstGen}<br>
			<b>Reload Time</b>: ${d.reloadTime} second(s)<br>
			<b>Max Ammo</b>: ${d.maxAmmo}
			`

			document.getElementById('sk1t').innerHTML += `<span class="no-header-weight">${d.skills[0].name}</span>`;
			document.getElementById('skill1').innerHTML = skillReplace(0, 1);

			document.getElementById('sk2t').innerHTML += `<span class="no-header-weight">${d.skills[1].name}</span>`;
			document.getElementById('skill2').innerHTML = skillReplace(1, 1);

			document.getElementById('burt').innerHTML += `<span class="no-header-weight">${d.skills[2].name}</span>`;
			document.getElementById('burst').innerHTML = skillReplace(2, 1);

			function skillReplace(skill, level)
			{
				let desc = d.skills[skill].description;

				for (let i = 0; i < Object.keys(d.skills[skill].levels[level]).length + 1; i++) {
					desc = desc.replaceAll("{description_value_" + String(i+1).padStart(2, '0') + "}", `<b>${d.skills[skill].levels[level]["description_value_" + String(i+1).padStart(2, '0')]}</b>`)
				}

				desc = desc.replaceAll("When", "<br><br>When");
				desc = desc.replaceAll("■", "<br><br>■");

				while (desc.startsWith("<br>")) {
					desc = desc.replace('<br>', '');
				}

				return desc;
			}

		</script>
	</body>
</html>

<GlobalStyles />